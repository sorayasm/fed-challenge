{"version":3,"sources":["logo.svg","components/Search/index.js","components/Box/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Search","getData","e","input","target","value","setState","state","this","display","props","Container","Form","Row","Col","InputGroup","className","FormControl","placeholder","aria-label","aria-describedby","onChange","onBlur","Append","Button","variant","onClick","Component","Box","Card","border","Header","Image","width","height","src","owner","picture","roundedCircle","Text","title","toUpperCase","substring","firstName","lastName","href","email","Link","link","Img","image","Body","Title","text","likes","tags","join","Footer","Date","publishDate","toLocaleDateString","App","useState","loading","setLoading","info","setInfo","count","setCount","tag","a","url","config","baseUrl","headers","api_key","axios","get","response","data","console","log","status","error","length","fluid","noGutters","logo","alt","Spinner","animation","CardDeck","map","i","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"kNAAAA,EAAOC,QAAU,IAA0B,kC,2UCyD5BC,E,kDA7CX,aAAc,IAAD,8BACT,gBAMJC,QAAU,SAACC,GACP,IAAMC,EAAQD,EAAEE,OAAOC,MACvB,EAAKC,SAAS,CAACH,MAAOA,KAPtB,EAAKI,MAAQ,CACTJ,MAAM,IAHD,E,qDAYJ,IAAD,OACIA,EAAUK,KAAKD,MAAfJ,MACAM,EAAYD,KAAKE,MAAjBD,QACR,OACI,kBAACE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAKC,IAAN,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,UAAU,mBAClB,kBAACC,EAAA,EAAD,CACIC,YAAY,eACZC,aAAW,eACXC,mBAAiB,eACjBf,MAAOF,EACPkB,SAAU,SAACnB,GAAD,OAAM,EAAKD,QAAQC,IAC7BoB,OAAQ,WAAKb,EAAQN,MAEzB,kBAACY,EAAA,EAAWQ,OAAZ,KACI,kBAACC,EAAA,EAAD,CACIC,QAAQ,gBACRC,QAAS,WAAKjB,EAAQN,KAF1B,mB,GA/BXwB,a,uBCJN,SAASC,EAAIlB,GAAQ,IACxBR,EAAKQ,EAALR,EACR,OACI,kBAAC2B,EAAA,EAAD,CAAMC,OAAO,QACT,kBAACD,EAAA,EAAKE,OAAN,CAAaf,UAAU,IACnB,kBAACgB,EAAA,EAAD,CACIC,MAAO,GACPC,OAAQ,GACRC,IAAKjC,EAAEkC,MAAMC,QACbC,eAAa,IAEjB,kBAACT,EAAA,EAAKU,KAAN,KACKrC,EAAEkC,MAAMI,MAAM,GAAGC,cAAgBvC,EAAEkC,MAAMI,MAAME,UAAU,GAD9D,IACmExC,EAAEkC,MAAMO,UAD3E,KACwFzC,EAAEkC,MAAMQ,UAEhG,kBAACpB,EAAA,EAAD,CACQC,QAAQ,QACRoB,KAAM,UAAW3C,EAAEkC,MAAMU,OAEzB,kBAAC,IAAD,QAGZ,kBAACjB,EAAA,EAAKkB,KAAN,CAAWF,KAAM3C,EAAE8C,MACf,kBAACnB,EAAA,EAAKoB,IAAN,CACIxB,QAAQ,MACRU,IAAKjC,EAAEgD,SAGf,kBAACrB,EAAA,EAAKsB,KAAN,KACI,kBAACtB,EAAA,EAAKuB,MAAN,KAAalD,EAAEmD,MACf,kBAACxB,EAAA,EAAKU,KAAN,KACA,kBAAC,IAAD,MADA,IACYrC,EAAEoD,MACd,kBAAC9B,EAAA,EAAD,CACIC,QAAQ,QACRoB,KAAM3C,EAAE8C,MAER,kBAAC,IAAD,QAGJ,kBAACnB,EAAA,EAAKU,KAAN,KACI,0CADJ,IAC8BrC,EAAEqD,KAAKC,KAAK,MAD1C,MAIJ,kBAAC3B,EAAA,EAAK4B,OAAN,KACI,2BAAOzC,UAAU,cAAjB,iBAA6C,IAAI0C,KAAKxD,EAAEyD,aAAaC,wB,4BCiDtEC,MAlFf,WAAgB,IAAD,EACgBC,oBAAS,GADzB,mBACPC,EADO,KACEC,EADF,OAEUF,mBAAS,MAFnB,mBAEPG,EAFO,KAEDC,EAFC,OAGYJ,mBAAS,GAHrB,mBAGPK,EAHO,KAGAC,EAHA,KASVnE,EAAO,uCAAG,WAAOoE,GAAP,mBAAAC,EAAA,6DACPC,EADO,UACEC,IAAeC,QADjB,gBACgCJ,EADhC,SAEPK,EAAU,CACfA,QAAS,CACR,SAAUF,IAAeG,QACzB,8BAA8B,wBAC9B,mCAAoC,OACpC,QAAW,QAIbX,GAAW,GAXE,kBAaWY,IAAMC,IAAKN,EAAKG,GAb3B,cAaNI,EAbM,UAeXZ,EAAQY,EAASC,KAAKA,MACtBC,QAAQC,IAAIH,EAASC,KAAKA,MAC1Bf,GAAW,IAjBA,kBAmBLc,GAnBK,qCAqBZV,EAASD,EAAQ,GACjBH,GAAW,IACP,MAA0B,MAAjB,KAAMkB,OAvBP,oBAwBXF,QAAQG,MAAM,iBACdH,QAAQC,IAAId,KACE,OAATF,GAAoBA,EAAKmB,OAAS,GA1B5B,gKAAH,sDAmCX,OACC,kBAACzE,EAAA,EAAD,CAAW0E,OAAK,EAACrE,UAAU,OAC1B,kBAACH,EAAA,EAAD,CAAKyE,WAAS,GACb,kBAACxE,EAAA,EAAD,CAAKE,UAAU,cACd,yBAAKmB,IAAKoD,IAAMvE,UAAU,WAAWwE,IAAI,SACzC,uBAAGxE,UAAU,aAAb,gCACA,kBAAC,EAAD,CAAQP,QA7CI,SAAC4D,GAChBpE,EAAQoE,QA+CP,kBAACxD,EAAA,EAAD,CAAKyE,WAAS,GACb,kBAACxE,EAAA,EAAD,CAAKE,UAAU,kBACZ+C,GAAYA,GAAqB,OAATE,IAC1B,yBAAKjD,UAAU,QACd,kBAACyE,EAAA,EAAD,CAASC,UAAU,WAIlB3B,GAAqB,OAATE,GACd,kBAACtD,EAAA,EAAD,KACC,kBAACE,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,KACC,kBAAC6E,EAAA,EAAD,KACE1B,EAAK2B,KAAI,SAAC1F,EAAG2F,GAAJ,OAAU,kBAACjE,EAAD,CAAKkE,IAAKD,EAAI3F,EAAGA,YAOvC6D,GAAWE,GAAyB,IAAhBA,EAAKmB,QAC3B,kBAACpD,EAAA,EAAD,CAAOG,IAAI,6EAA6EkD,OAAK,QC9E9EU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5B,GACLH,QAAQG,MAAMA,EAAM6B,c","file":"static/js/main.082be43d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\n\nclass Search extends Component {\n    \n    constructor(){\n        super();\n        this.state = {\n            input:''\n        }\n    }\n\n    getData = (e) => {\n        const input = e.target.value;\n        this.setState({input: input })\n    }\n\n    render(){\n        const { input } = this.state;\n        const { display } = this.props;\n        return (\n            <Container>\n                <Form.Row>\n                    <Col>\n                        <InputGroup className='mb-3 search-bar'>\n                            <FormControl\n                                placeholder='Search a tag'\n                                aria-label='Search a tag'\n                                aria-describedby='basic-addon2'\n                                value={input}\n                                onChange={(e)=> this.getData(e)}\n                                onBlur={()=>{display(input)}}\n                            />\n                            <InputGroup.Append>\n                                <Button \n                                    variant='outline-light'\n                                    onClick={()=>{display(input)}}\n                                >\n                                    Search\n                                </Button>\n                            </InputGroup.Append>\n                        </InputGroup>\n                    </Col>\n                </Form.Row>\n            </Container>\n        )\n    }\n}\n\n\nexport default Search;\n\n\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Image from 'react-bootstrap/Image';\nimport { FaHeart, FaInstagram, FaEnvelope } from 'react-icons/fa';\n\nexport default function Box(props) {\n    const { e} = props\n    return (\n        <Card border='dark'>\n            <Card.Header className=''>\n                <Image  \n                    width={64}\n                    height={64}\n                    src={e.owner.picture} \n                    roundedCircle \n                />\n                <Card.Text>\n                    {e.owner.title[0].toUpperCase() + e.owner.title.substring(1)} {e.owner.firstName}  {e.owner.lastName}\n                </Card.Text>\n                <Button \n                        variant='light'\n                        href={'mailto:'+ e.owner.email}\n                    >\n                        <FaEnvelope/>\n                    </Button>\n            </Card.Header>\n            <Card.Link href={e.link}>\n                <Card.Img \n                    variant='top' \n                    src={e.image} \n                />\n            </Card.Link>\n            <Card.Body>\n                <Card.Title>{e.text}</Card.Title>\n                <Card.Text>\n                <FaHeart/> {e.likes} \n                <Button \n                    variant='light'\n                    href={e.link}\n                >\n                    <FaInstagram/>\n                </Button>\n                </Card.Text>\n                <Card.Text>\n                    <strong>Tags: </strong> { e.tags.join(', ') }.\n                </Card.Text>\n            </Card.Body>\n            <Card.Footer>\n                <small className='text-muted'>Published on: {new Date(e.publishDate).toLocaleDateString()}</small>\n            </Card.Footer>\n        </Card>\n    )\n}\n","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from 'axios';\nimport * as config from '../src/enviroment/config.json';\n\nimport Search from './components/Search';\nimport Box from './components/Box';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Spinner from 'react-bootstrap/Spinner';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport Image from 'react-bootstrap/Image';\n\nfunction App() {\n\tconst [loading, setLoading] = useState(false);\n\tconst [info, setInfo] = useState(null);\n\tconst [count, setCount] = useState(0);\n\n\tconst display = (tag) => {\n\t\tgetData(tag);\n\t}\n\n\tlet getData = async (tag) => {\n\t\tconst url = `${config.sandbox.baseUrl}/tag/${tag}/post`;\n\t\tconst headers = { \n\t\t\theaders: { \n\t\t\t\t'app-id': config.sandbox.api_key,\n\t\t\t\t'Access-Control-Allow-Origin':'http://localhost:3000',\n\t\t\t\t'Access-Control-Allow-Credentials': 'true',\n\t\t\t\t'methods': 'GET'\n\t\t\t} \n\t\t};\n\n\t\tsetLoading(true);\n\t\ttry {\n\t\t\tconst response = await axios.get( url, headers);\n\t\t\tif(response){\n\t\t\t\tsetInfo(response.data.data);\n\t\t\t\tconsole.log(response.data.data)\n\t\t\t\tsetLoading(false);\n\t\t\t}\n\t\t\treturn response;\n\t\t} catch (error) {\n\t\t\tsetCount(count + 1);\n\t\t\tsetLoading(false);\n\t\t\tif (error || error.status !== 200) {\n\t\t\t\tconsole.error('failed, retry');\n\t\t\t\tconsole.log(count)\n\t\t\t\tif ((info !== null ) && (info.length > 0)) {\n\t\t\t\t\treturn;\n\t\t\t\t} \n\t\t\t} else {\n\t\t\tthrow error;\n\t\t\t};\n\t\t};\n\t};\n\t\n\treturn (\n\t\t<Container fluid className='App' > \n\t\t\t<Row noGutters>\n\t\t\t\t<Col className='App-header'>\n\t\t\t\t\t<img src={logo} className='App-logo' alt='logo' />\n\t\t\t\t\t<p className='mt-3 mb-4'>Write a tag and click search</p>\n\t\t\t\t\t<Search display={display}/>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<Row noGutters>\n\t\t\t\t<Col className='App-container'>\n\t\t\t\t{ (loading || (loading && (info === null))) && \n\t\t\t\t\t<div className='mt-5'>\n\t\t\t\t\t\t<Spinner animation='grow' />\n\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t{ !loading && (info !== null ) && (\n\t\t\t\t\t<Container >\n\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t\t<CardDeck>\n\t\t\t\t\t\t\t\t\t{info.map((e, i) => <Box key={i}  e={e}/>)}\n\t\t\t\t\t\t\t\t</CardDeck>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\n\t\t\t\t\t</Container>\n\t\t\t\t)}\n\t\t\t\t{ !loading && info && (info.length === 0 ) &&(\n\t\t\t\t\t<Image src='https://blog.expertrec.com/wp-content/uploads/2019/01/no_results_found.png' fluid />\n\t\t\t\t)}\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t</Container>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}